#!/usr/bin/env node

var fs = require('fs'),
    request = require('request'),
    filed = require('filed'),
    mkdirp = require('mkdirp'),

    workingDir = process.argv[1],
    majeFile = process.argv[2],
    supportedProtocols = ['http', 'https'],
    basePath = undefined,
    buildTarget = process.argv[3] || 'development';

resolveMaje(majeFile);

function resolveMaje(majeFile) {
    var majeDescriptor = fs.readFileSync(majeFile, 'utf8'),
        maje = JSON.parse(majeDescriptor);
    basePath = maje.paths.development;

    mkdirp(basePath, 0777, function(error) {
        if(!error) {
            for(m in maje.majics) {
                var majicSource = maje.majics[m];
                castMajic(getMajic(majicSource));
            }
        } else {
            console.log(error);
            process.exit(1);
        }
    });
}

function getMajic(majicSource) {
    var protocol = majicSource.split(":").shift() || undefined,
        majic = undefined;
    if(isSupportedProtocol(protocol)) {
        request({ uri: majicSource }, function(error, response, majicDescriptor) {
            if(!error && response.statusCode == 200) {
                majic = JSON.parse(majicDescriptor);
            } else {
                console.log(error);
                process.exit(1);
            }
        });
    } else {
        var majicDescriptor = fs.readFileSync(majicSource);
        majic = JSON.parse(majicDescriptor);
    }
    return majic;
}

function castMajic(majic) {
    var path = [basePath,majic.paths.local].join(""),
        source = majic.source[buildTarget],
        filename = source.split("/").pop();
    if(majic.dependencies !== undefined) {
        for(d in majic.dependencies) {
            var majicSource = majic.dependencies[d];
            castMajic(getMajic(majicSource));
        }
    }
    mkdirp(path, 0777, function(error) {
        if(!error) {
            request({ uri: source }).pipe(filed([path,filename].join("")));
        } else {
            console.log(error);
            process.exit(1);
        }
    });
}

function isSupportedProtocol(protocol) {
    return (supportedProtocols.indexOf(protocol) >= 0);
}
